/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Visual;


import EstructurasAuxiliares.ListaNodoAlmacen;
import Logico.Amazon;
import Logico.Arista;
import Logico.NodoAlmacen;
import Logico.Producto;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alessandro
 */
public class Reporte extends javax.swing.JDialog {

    DefaultTableModel modeloBFS = new DefaultTableModel();
    DefaultTableModel modeloDFS = new DefaultTableModel();

    ListaNodoAlmacen almacenes;
    
    public Reporte(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);        
                
        String[] cabeceraTabla = new String[]{"Almacen", "Productos", "Disponibilidad"};
        modeloBFS.setColumnIdentifiers(cabeceraTabla);
        modeloDFS.setColumnIdentifiers(cabeceraTabla);
        tablaBFS.setModel(modeloBFS);
        tablaDFS.setModel(modeloDFS);
        
        long inicioTiempoBFS = System.nanoTime();
        reporteBFS();
        long finTiempoBFS = System.nanoTime();
        double tiempoTotalBFS = (double) ((finTiempoBFS - inicioTiempoBFS));
        tiempoBFS.setText("Tiempo: " + tiempoTotalBFS/100000 + " MiliSegundos");
        Amazon.getInstance().setAlmacenFalse();
        
        
        long inicioTiempoDFS = System.nanoTime();
        reporteDFS();
        long finTiempoDFS = System.nanoTime();
        double tiempoTotalDFS = (double) ((finTiempoDFS - inicioTiempoDFS));
        tiempoDFS.setText("Tiempo: " + tiempoTotalDFS/100000 + " MiliSegundos");
        Amazon.getInstance().setAlmacenFalse();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        scrollPanelDFS = new javax.swing.JScrollPane();
        tablaDFS = new javax.swing.JTable();
        lblTitulo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaBFS = new javax.swing.JTable();
        tiempoDFS = new javax.swing.JLabel();
        lblTitulo2 = new javax.swing.JLabel();
        lblTitulo3 = new javax.swing.JLabel();
        tiempoBFS = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("Cerrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 190, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 860, 80));

        scrollPanelDFS.setBackground(new java.awt.Color(255, 255, 255));
        scrollPanelDFS.setBorder(null);

        tablaDFS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPanelDFS.setViewportView(tablaDFS);

        jPanel1.add(scrollPanelDFS, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 140, 410, 220));

        lblTitulo.setBackground(new java.awt.Color(153, 153, 153));
        lblTitulo.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo.setText("DFS");
        jPanel1.add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 130, -1));

        tablaBFS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaBFS);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 410, 220));

        tiempoDFS.setBackground(new java.awt.Color(153, 153, 153));
        tiempoDFS.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        tiempoDFS.setForeground(new java.awt.Color(51, 51, 51));
        tiempoDFS.setText("Tiempo:");
        jPanel1.add(tiempoDFS, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 100, 390, -1));

        lblTitulo2.setBackground(new java.awt.Color(153, 153, 153));
        lblTitulo2.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        lblTitulo2.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo2.setText("BFS");
        jPanel1.add(lblTitulo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 130, -1));

        lblTitulo3.setBackground(new java.awt.Color(153, 153, 153));
        lblTitulo3.setFont(new java.awt.Font("Arial Black", 0, 25)); // NOI18N
        lblTitulo3.setForeground(new java.awt.Color(51, 51, 51));
        lblTitulo3.setText(">Reportes de Disponibilidad");
        jPanel1.add(lblTitulo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 430, -1));

        tiempoBFS.setBackground(new java.awt.Color(153, 153, 153));
        tiempoBFS.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        tiempoBFS.setForeground(new java.awt.Color(51, 51, 51));
        tiempoBFS.setText("Tiempo:");
        jPanel1.add(tiempoBFS, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 390, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 450));

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        dispose();
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Reporte dialog = new Reporte(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTitulo2;
    private javax.swing.JLabel lblTitulo3;
    private javax.swing.JScrollPane scrollPanelDFS;
    private javax.swing.JTable tablaBFS;
    private javax.swing.JTable tablaDFS;
    private javax.swing.JLabel tiempoBFS;
    private javax.swing.JLabel tiempoDFS;
    // End of variables declaration                   
    
    private void reporteDFS(){  
        modeloDFS.setRowCount(0);
        Stack<NodoAlmacen> stack = new Stack<>();
        NodoAlmacen almacen = Amazon.getInstance().getListaMisAlmacenes().getAlmacenByIndex(0);
        stack.add(almacen);
        almacen.setVisitado(true);

        while (!stack.isEmpty()) {
            NodoAlmacen nodoActual = stack.pop();
            for (Producto producto : nodoActual.getListaProducto().getProductos()) {
                if (producto != null) {
                    modeloDFS.addRow(new Object[]{nodoActual.getNombre(), producto.getNombre(), producto.getStock()});
                }else{
                    modeloDFS.addRow(new Object[]{nodoActual.getNombre(), "Vacío", "0"});
                }
            }
            for (Arista arista : nodoActual.getListaArista().getAristas()) {
                if (!arista.getNodoDestino().isVisitado()) {
                    arista.getNodoDestino().setVisitado(true);
                    arista.getNodoDestino().setNodoAnterior(arista.getNodoDestino());
                    stack.add(arista.getNodoDestino());
                }
            }
        }
    }
    
    private void reporteBFS(){
        modeloBFS.setRowCount(0);
        NodoAlmacen almacen = Amazon.getInstance().getListaMisAlmacenes().getAlmacenByIndex(0);
        Queue<NodoAlmacen> queue = new LinkedList<NodoAlmacen>();
        almacen.setVisitado(true);
        queue.add(almacen);
        while (!queue.isEmpty()) {
            NodoAlmacen nodoActual = queue.poll();
            for (Producto producto : nodoActual.getListaProducto().getProductos()) {
                if (producto != null) {
                    modeloBFS.addRow(new Object[]{nodoActual.getNombre(), producto.getNombre(), producto.getStock()});
                }else{
                    modeloBFS.addRow(new Object[]{nodoActual.getNombre(), "Vacío", "0"});
                }
            }
            for (Arista arista : nodoActual.getListaArista().getAristas()) {
                if (!arista.getNodoDestino().isVisitado()) {
                    arista.getNodoDestino().setVisitado(true);
                    queue.add(arista.getNodoDestino());
                }
            }
        }
    }
}

